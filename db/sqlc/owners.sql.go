// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: owners.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createOwner = `-- name: CreateOwner :execresult
INSERT INTO owners (
    name, bio
) VALUES (
    ?, ?
)
`

type CreateOwnerParams struct {
	Name string
	Bio  sql.NullString
}

func (q *Queries) CreateOwner(ctx context.Context, arg CreateOwnerParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOwner, arg.Name, arg.Bio)
}

const deleteOwner = `-- name: DeleteOwner :exec
DELETE FROM owners
WHERE id = ?
`

func (q *Queries) DeleteOwner(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOwner, id)
	return err
}

const getOwner = `-- name: GetOwner :one
SELECT id, name, bio FROM owners
WHERE id = ? LIMIT 1
`

func (q *Queries) GetOwner(ctx context.Context, id int64) (Owner, error) {
	row := q.db.QueryRowContext(ctx, getOwner, id)
	var i Owner
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const listOwners = `-- name: ListOwners :many
SELECT id, name, bio FROM owners
ORDER BY name
`

func (q *Queries) ListOwners(ctx context.Context) ([]Owner, error) {
	rows, err := q.db.QueryContext(ctx, listOwners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Owner
	for rows.Next() {
		var i Owner
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
